require('dotenv').config();
const fs = require('fs');
const path = require('path');
const fetch = require('node-fetch'); // –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
const pTimeout = require('p-timeout');
const { readExcelFromBuffer } = require('./excelReader');
const { loginEmaktab } = require('./loginAutomation');
const { Telegraf } = require('telegraf');

const bot = new Telegraf(process.env.BOT_TOKEN);

bot.start((ctx) => {
    ctx.reply('ü§ñ –Ø –∑–∞–ø—É—â–µ–Ω!\n\nüì§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à Excel —Ñ–∞–π–ª (–≤ —Ñ–æ—Ä–º–∞—Ç–µ `.xlsx`).\n\n‚ÑπÔ∏è –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, –Ω–∞–∂–º–∏—Ç–µ üëâ /example');
});

bot.command('example', async (ctx) => {
    await ctx.reply('üìÑ *–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ Excel —Ñ–∞–π–ª–∞*:\n\n1Ô∏è‚É£ –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ `.xlsx`\n2Ô∏è‚É£ –°—Ç–æ–ª–±—Ü—ã –¥–æ–ª–∂–Ω—ã –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è: `login` –∏ `password`\n3Ô∏è‚É£ üì∑ –ü—Ä–∏–º–µ—Ä –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–∏–∂–µ üëá');
    await ctx.replyWithPhoto({ source: './example.jpg' });
});

bot.on('document', async (ctx) => {
    if (!ctx.from) {
        console.log('ctx.from –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!');
        return;
    }

    const file = ctx.message.document;

    if (!file.file_name.endsWith('.xlsx')) {
        return ctx.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ `.xlsx`");
    }

    try {
        const fileLink = await ctx.telegram.getFileLink(file.file_id);
        const response = await fetch(fileLink.href);
        const buffer = await response.arrayBuffer();

        const data = readExcelFromBuffer(buffer);
        const userId = ctx.from?.id || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';

        if (data.length > 30) {
            console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ 30 –ª–æ–≥–∏–Ω–æ–≤!`);
            return ctx.reply(`‚ùå –í —Ñ–∞–π–ª–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–æ–≤: ${data.length} (–ú–∞–∫—Å–∏–º—É–º 30). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ —Å–ø–∏—Å–æ–∫.`);
        }

        console.log('–î–∞–Ω–Ω—ã–µ –∏–∑ Excel:', data);

        const failedLogins = [];

        for (let row of data) {
            const login = row.login || row.–ª–æ–≥–∏–Ω;
            const password = String(row.password || row.–ø–∞—Ä–æ–ª—å); // –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å—Ç—Ä–æ–∫—É

            if (login && password) {
                try {
                    const success = await pTimeout(
                        loginEmaktab(login, password),
                        60000, // 60 —Å–µ–∫—É–Ω–¥
                        `‚è≥ –¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—Ö–æ–¥–∞ –¥–ª—è ${login}`
                    );

                    if (!success) {
                        failedLogins.push(login);
                    }

                } catch (err) {
                    console.error(`‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –¥–ª—è ${login}:`, err.message);
                    failedLogins.push(login);
                }
            }
        }

        if (failedLogins.length > 0) {
            ctx.reply(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç—ã:\n${failedLogins.join('\n')}\n\n‚úÖ –û—Å—Ç–∞–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.`);
        } else {
            ctx.reply(`‚úÖ –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.`);
        }

    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Excel:', err);
        ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.');
    }
});

bot.launch();
